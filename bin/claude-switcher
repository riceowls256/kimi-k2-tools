#!/bin/bash

# Claude Provider Switcher
# Easy switching between Anthropic Claude and Kimi K2

set -euo pipefail

CONFIG_DIR="$HOME/.claude"
KIMI_CONFIG_DIR="$HOME/.kimi-claude"
BACKUP_DIR="$CONFIG_DIR/provider-backups"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

show_usage() {
    echo "Claude Provider Switcher"
    echo
    echo "Usage: $0 [COMMAND]"
    echo
    echo "Commands:"
    echo "  status       Show current provider configuration"
    echo "  kimi         Switch to Kimi K2"
    echo "  anthropic    Switch to Anthropic Claude"
    echo "  backup       Backup current configuration"
    echo "  restore      Restore from backup"
    echo "  list         List available backups"
    echo "  help         Show this help message"
    echo
    echo "Examples:"
    echo "  $0 status"
    echo "  $0 kimi"
    echo "  $0 anthropic"
}

backup_current_config() {
    local backup_name="${1:-$(date +%Y%m%d_%H%M%S)}"
    local backup_path="$BACKUP_DIR/$backup_name"
    
    mkdir -p "$backup_path"
    
    if [[ -f "$CONFIG_DIR/settings.json" ]]; then
        cp "$CONFIG_DIR/settings.json" "$backup_path/settings.json"
        log_success "Backed up current configuration to $backup_path"
    else
        log_info "No existing configuration to backup"
    fi
}

switch_to_kimi() {
    log_info "Switching to Kimi K2..."
    
    # Backup current configuration
    backup_current_config "before_kimi_$(date +%Y%m%d_%H%M%S)"
    
    # Check for API key
    local api_key=""
    if [[ -f "$KIMI_CONFIG_DIR/api_key" ]]; then
        api_key=$(cat "$KIMI_CONFIG_DIR/api_key")
    elif [[ -n "${ANTHROPIC_AUTH_TOKEN:-}" ]]; then
        api_key="$ANTHROPIC_AUTH_TOKEN"
    else
        echo "No Kimi K2 API key found."
        echo "Please set your API key first:"
        echo "  echo 'sk-your-key' > $KIMI_CONFIG_DIR/api_key"
        exit 1
    fi
    
    # Create Kimi K2 configuration
    mkdir -p "$CONFIG_DIR"
    cat > "$CONFIG_DIR/settings.json" << EOF
{
  "model": "sonnet",
  "env": {
    "ANTHROPIC_AUTH_TOKEN": "$api_key",
    "ANTHROPIC_BASE_URL": "https://api.moonshot.ai/anthropic/"
  }
}
EOF
    
    log_success "Switched to Kimi K2"
    log_info "All Claude Code sessions will now use Kimi K2"
}

switch_to_anthropic() {
    log_info "Switching to Anthropic Claude..."
    
    # Backup current configuration  
    backup_current_config "before_anthropic_$(date +%Y%m%d_%H%M%S)"
    
    # Create basic Anthropic configuration
    mkdir -p "$CONFIG_DIR"
    cat > "$CONFIG_DIR/settings.json" << EOF
{
  "model": "sonnet"
}
EOF
    
    log_success "Switched to Anthropic Claude"
    log_info "Make sure your ANTHROPIC_API_KEY environment variable is set"
}

show_status() {
    echo -e "${BOLD}Current Claude Code Configuration:${NC}"
    echo
    
    if [[ -f "$CONFIG_DIR/settings.json" ]]; then
        echo "Configuration file: $CONFIG_DIR/settings.json"
        echo
        
        # Check provider
        if grep -q "moonshot.ai" "$CONFIG_DIR/settings.json" 2>/dev/null; then
            echo -e "Provider: ${GREEN}Kimi K2 (Moonshot AI)${NC}"
            echo "Endpoint: https://api.moonshot.ai/anthropic/"
            
            # Check API key
            if grep -q "ANTHROPIC_AUTH_TOKEN" "$CONFIG_DIR/settings.json"; then
                local key_line=$(grep "ANTHROPIC_AUTH_TOKEN" "$CONFIG_DIR/settings.json" | sed 's/.*": "\\([^"]*\\)".*/\\1/')
                if [[ "$key_line" =~ ^sk- ]]; then
                    echo "API Key: ${key_line:0:10}... (configured)"
                else
                    echo "API Key: Not configured properly"
                fi
            fi
            
            # Show cost savings
            echo
            echo -e "${YELLOW}ðŸ’° Cost Savings:${NC}"
            echo "  Input tokens: 100x cheaper ($0.15 vs $15.00 per 1M)"
            echo "  Output tokens: 30x cheaper ($2.50 vs $75.00 per 1M)"
            
        else
            echo -e "Provider: ${BLUE}Anthropic Claude${NC}"
            echo "Endpoint: https://api.anthropic.com/"
            
            if [[ -n "${ANTHROPIC_API_KEY:-}" ]]; then
                echo "API Key: ${ANTHROPIC_API_KEY:0:10}... (environment)"
            else
                echo "API Key: Not found in environment (ANTHROPIC_API_KEY)"
            fi
        fi
        
        echo
        echo "Configuration content:"
        cat "$CONFIG_DIR/settings.json" | python3 -m json.tool 2>/dev/null || cat "$CONFIG_DIR/settings.json"
        
    else
        echo "No configuration file found at $CONFIG_DIR/settings.json"
        echo "Claude Code will use default settings"
    fi
}

list_backups() {
    echo -e "${BOLD}Available Configuration Backups:${NC}"
    echo
    
    if [[ -d "$BACKUP_DIR" ]] && [[ -n "$(ls -A "$BACKUP_DIR" 2>/dev/null)" ]]; then
        for backup in "$BACKUP_DIR"/*; do
            if [[ -d "$backup" ]]; then
                local backup_name=$(basename "$backup")
                local backup_date=$(stat -f "%Sm" -t "%Y-%m-%d %H:%M:%S" "$backup" 2>/dev/null || echo "unknown")
                echo "  $backup_name (created: $backup_date)"
                
                # Show provider type
                if [[ -f "$backup/settings.json" ]]; then
                    if grep -q "moonshot.ai" "$backup/settings.json" 2>/dev/null; then
                        echo "    Provider: Kimi K2"
                    else
                        echo "    Provider: Anthropic Claude"
                    fi
                fi
                echo
            fi
        done
    else
        echo "No backups found"
    fi
}

restore_backup() {
    echo -e "${BOLD}Available Backups:${NC}"
    list_backups
    
    echo -n "Enter backup name to restore: "
    read -r backup_name
    
    local backup_path="$BACKUP_DIR/$backup_name"
    
    if [[ -d "$backup_path" ]] && [[ -f "$backup_path/settings.json" ]]; then
        # Backup current before restoring
        backup_current_config "before_restore_$(date +%Y%m%d_%H%M%S)"
        
        # Restore
        cp "$backup_path/settings.json" "$CONFIG_DIR/settings.json"
        log_success "Restored configuration from $backup_name"
        
        # Show what was restored
        show_status
    else
        echo "Backup '$backup_name' not found"
        exit 1
    fi
}

main() {
    case "${1:-help}" in
        status|s)
            show_status
            ;;
        kimi|k)
            switch_to_kimi
            ;;
        anthropic|a)
            switch_to_anthropic
            ;;
        backup|b)
            backup_current_config "${2:-}"
            ;;
        restore|r)
            restore_backup
            ;;
        list|l)
            list_backups
            ;;
        help|h|--help|-h)
            show_usage
            ;;
        *)
            echo "Unknown command: $1"
            echo
            show_usage
            exit 1
            ;;
    esac
}

# Create necessary directories
mkdir -p "$CONFIG_DIR" "$KIMI_CONFIG_DIR" "$BACKUP_DIR"

main "$@"